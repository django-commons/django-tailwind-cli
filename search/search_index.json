{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-tailwind-cli","text":"<p>This library provides an integration of Tailwind CSS for Django that is using on the precompiled versions of the Tailwind CSS CLI.</p> <p>The goal of this library is to provided the simplest possible Tailwind integration for your Django project. It took its inspiration from the Tailwind integration for Phoenix which completely skips the neccesity of a node installation.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install the library.</li> </ol> <pre><code>python -m pip install django-tailwind-cli\n</code></pre> <ol> <li>Add <code>django_tailwind_cli</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</li> </ol> <pre><code>INSTALLED_APPS = [\n    # other Django apps\n    \"django_tailwind_cli\",\n]\n</code></pre> <ol> <li>Configure the <code>STATICFILES_DIRS</code> parameter in your <code>settings.py</code> if not already configured.</li> </ol> <pre><code>STATICFILES_DIRS = [BASE_DIR / \"assets\"]\n</code></pre> <ol> <li>Add template code.</li> </ol> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n  ...\n  {% tailwind_css %}\n  ...\n&lt;/head&gt;\n</code></pre> <ol> <li>Start the debug server.</li> </ol> <pre><code>python manage.py tailwind runserver\n</code></pre> <p>Enjoy!</p> <p>Checkout the detailed installation guide if you want to activate browser reload or the <code>runserver_plus</code> management command known from <code>django-extensions</code>.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simplest possible integration.</li> <li>Management commands:</li> <li>To start the Tailwind CLI in watch mode during development.</li> <li>To build the production grade CSS file for your project.</li> <li>To start a debug server along with the Tailwind CLI in watch mode in a single session.</li> <li>Necessary configuration to adapt the library to your project, when the defaults don't fit you.</li> <li>A template tag to include the Tailwind CSS file in your project.</li> <li>A base template for your project.</li> <li>A sane tailwind.config.js that activates all the official plugins and includes a simple HTMX plugin.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.9 or newer with Django &gt;= 4.2.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation can be found at https://django-tailwind-cli.andrich.me/</p>"},{"location":"#contributing","title":"Contributing","text":"<p>This package requires uv for dependency management and tooling. So you have to install it first. just is used as a handy command runner to save some typing on the command line. Do yourself a favor and install it too.</p> <pre><code># Setup development environment\njust bootstrap\n\n# Upgrade/install all dependencies defined in pyproject.toml\njust upgrade\n\n# Run pre-commit rules on all files\njust lint\n\n# Run test suite\njust test\n</code></pre>"},{"location":"#without-just-but-using-uv","title":"Without just, but using uv","text":"<pre><code># Create venv\nuv venv\n\n# Install dependencies\nuv sync --all-extras\n\n# Run tox testrunner\nuvx --with tox-uv tox\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This software is licensed under MIT license.</p>"},{"location":"base_template/","title":"Base Template","text":"<p>The package also includes a minimal base template, which you can use as a starting point for your own project. It is a very simple template, which only includes the CSS stylesheets and the <code>tailwind_css</code> template tag. You can use by putting <code>{% extends \"tailwind_cli/base.html\" %}</code> into your template files.</p> tailwind_cli/base.html<pre><code>{% load tailwind_cli %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"{{ LANGUAGE_CODE }}\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}Home{% endblock title %}&lt;/title&gt;\n    {% tailwind_css %}\n    {% block extra_head %}{% endblock extra_head %}\n  &lt;/head&gt;\n  &lt;body&gt;\n    {% block content %}\n    {% endblock content %}\n    {% block extra_body %}{% endblock extra_body %}\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#2170","title":"2.17.0","text":"<ul> <li>Internal refactoring. Config class has been replaced with django-appconfig and some function in the django_tailwind_cli.utils package.</li> <li>uv is used for publishing too.</li> <li>Updated tooling configuration.</li> </ul>"},{"location":"changelog/#2160","title":"2.16.0","text":"<ul> <li>Set the minimum supported version of Python to 3.9.</li> <li>Set the minimum supported version of Django to 4.2.</li> <li>Switched the tooling completely to uv.</li> <li>Bumped the default version of Tailwind CSS to 3.4.11.</li> </ul>"},{"location":"changelog/#2150","title":"2.15.0","text":"<ul> <li>#130 by @Tobi-De extended the support for custom tailwind cli builds. See <code>TAILWIND_CLI_SRC_REPO</code> and <code>TAILWIND_CLI_ASSET_NAME</code> in the documentation.</li> </ul>"},{"location":"changelog/#2140","title":"2.14.0","text":"<ul> <li>#129 by @Tobi-De add a setting to allow for custom tailwind source repo</li> <li>Bumped default version of tailwindcss to 3.4.10.</li> </ul>"},{"location":"changelog/#2130","title":"2.13.0","text":"<ul> <li>#127   by @bckohan upgrade django-typer and fixed future incompatibilities with django-typer 3.0.</li> <li>moved to tox for testing.</li> <li>Added Python 3.13 to the test matrix.</li> <li>Added Django 5.1a1 to the test matrix.</li> <li>Bumped default version of tailwindcss to 3.4.4.</li> </ul>"},{"location":"changelog/#2120","title":"2.12.0","text":"<ul> <li>Reintroduced support for Python 3.8. Seems as I have to support than I want to.</li> <li>Added justfile to ease management of package and dev environment.</li> </ul>"},{"location":"changelog/#2111","title":"2.11.1","text":"<ul> <li>Changed project tooling to uv, nox and flit.</li> <li>Bumped default version of tailwindcss to 3.4.3.</li> </ul>"},{"location":"changelog/#2110","title":"2.11.0","text":"<ul> <li>Switched default configuration for tailwind to the less opinionated default version.</li> </ul>"},{"location":"changelog/#2100","title":"2.10.0","text":"<ul> <li>Added <code>download_cli</code> management command.</li> </ul>"},{"location":"changelog/#290","title":"2.9.0","text":"<ul> <li>Bumped default Tailwind CLI version to 3.4.1.</li> <li>Reimplemented the management command using django_typer</li> <li>Removed Python 3.8 from the list of supported versions.</li> </ul>"},{"location":"changelog/#281","title":"2.8.1","text":"<ul> <li>#83   by @lgp171188 fixed some documentation errors.</li> </ul>"},{"location":"changelog/#280","title":"2.8.0","text":"<ul> <li>Bumped default Tailwind CLI version to 3.4.0.</li> </ul>"},{"location":"changelog/#273","title":"2.7.3","text":"<ul> <li>#80   by @joshuadavidthomas added document for using the   management commands inside a docker container.</li> <li>#81   by @joshuadavidthomas fixed typos in the documentation.</li> </ul>"},{"location":"changelog/#272","title":"2.7.2","text":"<ul> <li>Fixed broken commit for 2.7.1. Sorry guys.</li> </ul>"},{"location":"changelog/#271","title":"2.7.1","text":"<ul> <li>Bumped default Tailwind CLI version to 3.3.6.</li> </ul>"},{"location":"changelog/#270","title":"2.7.0","text":"<ul> <li>Added more command line arguments to <code>tailwind runserver</code> and <code>tailwind runserver_plus</code>.</li> <li><code>tailwind runserver</code><ul> <li><code>--skip-checks</code> #69</li> <li><code>--noreload</code></li> <li><code>--nothreading</code></li> <li><code>--ipv6</code></li> </ul> </li> <li><code>tailwind runserver_plus</code><ul> <li><code>--noreload</code></li> <li><code>--nothreading</code></li> <li><code>--ipv6</code></li> <li><code>--pdb</code></li> <li><code>--ipdb</code></li> <li><code>--pm</code></li> <li><code>--print-sql</code></li> </ul> </li> <li>Fixed #67 to fetch the correct   CLI on the Windows platform.</li> <li><code>TAILWIND_CLI_PATH</code> can also point to a pre-installed binary from a package manager.</li> <li>Added a new setting <code>TAILWIND_CLI_AUTOMATIC_DOWNLOAD</code> to steer if you want the library to download   the CLI binary or not. This comes in handy with the additional option for <code>TAILWIND_CLI_PATH</code> to   point to a pre-installed binary.</li> </ul>"},{"location":"changelog/#260","title":"2.6.0","text":"<ul> <li>Added 'support' for Django 5.0.</li> <li>Extended the tox configuration to include Django 5.0b1 and beyond.</li> <li>Added the trove classifiert.</li> <li>Removed the upper boundary of the django version.</li> </ul>"},{"location":"changelog/#250","title":"2.5.0","text":"<ul> <li>Bumped default version of Tailwind CSS CLI to 3.3.5.</li> </ul>"},{"location":"changelog/#245","title":"2.4.5","text":"<ul> <li>Moved coverage to the dev depencies. Somehow it ended up in the package dependencies.</li> </ul>"},{"location":"changelog/#244","title":"2.4.4","text":"<ul> <li>#59   by @killianarts fixed a regression from 2.4.3 that used the   wrong runserver for the runserver_plus command.</li> </ul>"},{"location":"changelog/#243","title":"2.4.3","text":"<ul> <li>Code and project cleanup.</li> <li>Switched back to <code>unittest</code> for testing purposes.</li> </ul>"},{"location":"changelog/#242","title":"2.4.2","text":"<ul> <li>Correctly map aarch64 machine architecture to arm64 for downloading the CLI.</li> </ul>"},{"location":"changelog/#241","title":"2.4.1","text":"<ul> <li>Added checks for <code>runserver_plus</code> management command to give a nice error message,   when <code>django-extensions</code> and <code>Werkzeug</code> are not properly installed.</li> </ul>"},{"location":"changelog/#240","title":"2.4.0","text":"<ul> <li>Back to Poetry for project management.</li> <li>#57   by @wshayes added optional django-extensions for the runserver_plus   command.</li> </ul>"},{"location":"changelog/#230","title":"2.3.0","text":"<ul> <li>Changed default config to support lsp-tailwindcss</li> </ul> <p>\"python3 -m django\" was replaced with \"python manage.py\" so that the dynamic   configuration of the content selector in tailwind.config.js also works inside   the language server for Tailwind CSS in VSCode, Sublime, etc.</p>"},{"location":"changelog/#223","title":"2.2.3","text":"<ul> <li>Fixed a copy&amp;paste error introduced by pasting the tailwind.config.js without proper escaping.</li> </ul>"},{"location":"changelog/#222","title":"2.2.2","text":"<ul> <li>Fixed an error locating templates from the global template directories configured   via <code>settings.TEMPLATES[0][\"DIRS\"]</code>.</li> </ul>"},{"location":"changelog/#221","title":"2.2.1","text":"<ul> <li>Fixed a bug introduced by refactoring the changes   from #49.</li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li>#49   by @andrlik added a new management   command <code>tailwind list_templates</code>.</li> <li>The new default config uses this command to implent the idea of Calton Gibson outlined in his blog   post Using Django\u2019s template loaders to configure Tailwind.</li> </ul>"},{"location":"changelog/#211","title":"2.1.1","text":"<ul> <li>Switched from poetry to hatch for package management.</li> </ul>"},{"location":"changelog/#206","title":"2.0.6","text":"<ul> <li>Bugfix for default tailwind.config.js.</li> </ul>"},{"location":"changelog/#205","title":"2.0.5","text":"<ul> <li>Fixed a regression with the default path for the Tailwind CLI.</li> </ul>"},{"location":"changelog/#204","title":"2.0.4","text":"<ul> <li>The reworked testing setup broke the package. Had to pull 2.0.3 from PyPI.</li> </ul>"},{"location":"changelog/#203","title":"2.0.3","text":"<ul> <li>Readded support for Python 3.8.</li> <li>Added Python 3.12 to the testing matrix.</li> </ul>"},{"location":"changelog/#202","title":"2.0.2","text":"<ul> <li>Bugfixes for typing errors.</li> <li>Added missing test code.</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":"<ul> <li>Version 2.0.0 is major refactoring compared to version 1.4.3.</li> <li>No more theme app required.</li> <li>Easier to install.</li> <li>Better out-of-the-box DX.</li> <li>A custom runserver that starts the Tailwind CLI watcher and the debug server in a single terminal   session.</li> <li>Less dependencies.</li> </ul>"},{"location":"changelog/#143","title":"1.4.3","text":"<ul> <li>Fixed broken links in the documentation and README.</li> </ul>"},{"location":"changelog/#140","title":"1.4.0","text":"<ul> <li>Refactored the project for future extensions.</li> <li>Added proper documetation which is hosted   at https://oliverandrich.github.io/django-tailwind-cli/.</li> <li>Swichted from django-click to django-rich to implement the management commands.</li> </ul>"},{"location":"changelog/#131","title":"1.3.1","text":"<ul> <li>Switched back to poetry after a long discussion.</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":"<ul> <li>Switched from poetry to pdm.</li> </ul>"},{"location":"changelog/#122","title":"1.2.2","text":"<ul> <li>Fixed docstrings.</li> <li>Extended ruff configuration.</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":"<ul> <li>Bumped default tailwind version to 3.2.7.</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>Added support for Django 4.2.</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Fixes for documentation.</li> <li>Bumped Tailwind CSS default version to 3.2.4.</li> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Introduced django-click to the project.</li> <li>Refactored the management commands to use django-click.</li> <li>Renamed the <code>startwatcher</code> command to <code>watch</code>. I'm a lazy guy. :smile:</li> <li>Switched to tox for local and CI testing.</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<ul> <li>Removed <code>httpx</code> as a dependency. Downloading the cli is done with <code>urllib.request.urlopen</code> once   again. Fixes #4</li> <li>Removed rich-styling information from error strings.   Fixes #5</li> <li>Fixing more typos in the README.md.</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Fixing some typos in the documentation.</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>Inital public release.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-django-tailwind-cli","title":"Install <code>django-tailwind-cli</code>","text":"<ol> <li>Install the library.</li> </ol> <pre><code>python -m pip install django-tailwind-cli\n</code></pre> <p>with optional <code>django-extensions</code> and <code>Werkezeug</code> libraries to use the <code>runserver_plus</code> command.</p> <pre><code>python -m pip install django-tailwind-cli[django-extensions]\n</code></pre> <ol> <li>Add <code>django_tailwind_cli</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</li> </ol> <pre><code>INSTALLED_APPS = [\n    # other Django apps\n    \"django_tailwind_cli\",\n]\n</code></pre> <p>If you plan to use the <code>runserver_plus</code> command, the changes to <code>INSTALLED_APPS</code> looks like that.</p> <pre><code>INSTALLED_APPS = [\n    # other Django apps\n    \"django_tailwind_cli\",\n    \"django_extensions,\n]\n</code></pre> <ol> <li>Configure the <code>STATICFILES_DIRS</code> parameter in your <code>settings.py</code> if not already configured.</li> </ol> <pre><code>STATICFILES_DIRS = [BASE_DIR / \"assets\"]\n</code></pre> <ol> <li>Add template code.</li> </ol> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n  ...\n  {% tailwind_css %}\n  ...\n&lt;/head&gt;\n</code></pre> <ol> <li>Start the debug server or start the Tailwind CLI in watch mode.</li> </ol> <pre><code>python manage.py tailwind runserver\n</code></pre> <p>Or</p> <pre><code>python manage.py tailwind runserver_plus\n</code></pre> <p>Or</p> <pre><code>python manage.py tailwind watch\n</code></pre> <p>If you only start the Tailwind CLI in watch mode, you have to start the debug server with the standard command <code>python manage.py runserver</code> seperately.</p>"},{"location":"installation/#optional-steps","title":"Optional steps","text":""},{"location":"installation/#install-django-browser-reload","title":"Install <code>django-browser-reload</code>","text":"<p>If you enjoy automatic reloading during development. Install the django-browser-reload app. The following installation steps are taken from the README of the project.</p> <ol> <li>Install <code>django-browser-reload</code> inside your Django project.</li> </ol> <pre><code>python -m pip install django-browser-reload\n</code></pre> <ol> <li> <p>Ensure you have <code>django.contrib.staticfiles</code> in your <code>INSTALLED_APPS</code>.</p> </li> <li> <p>Add <code>django_browser_reload</code> app to your <code>INSTALLED_APPS</code>.</p> </li> </ol> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"django_browser_reload\",\n    ...,\n]\n</code></pre> <ol> <li>Include the app URL\u2019s in your root URLconf(s).</li> </ol> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    ...,\n    path(\"__reload__/\", include(\"django_browser_reload.urls\")),\n]\n</code></pre> <ol> <li>Add the middleware.</li> </ol> <pre><code>MIDDLEWARE = [\n    # ...\n    \"django_browser_reload.middleware.BrowserReloadMiddleware\",\n    # ...\n]\n</code></pre> <p>The middleware should be listed after any that encodes the response, such as Django\u2019s GZipMiddleware.</p> <p>The middleware automatically inserts the required script tag on HTML responses before  when DEBUG is True. It does so to every HTML response, meaning it will be included on Django\u2019s debug pages, admin pages, etc. If you want more control, you can instead insert the script tag in your templates\u2014see below.</p>"},{"location":"settings/","title":"Settings &amp; Configuration","text":""},{"location":"settings/#settings","title":"Settings","text":"<p>The package can be configured by a few settings, which can be overwritten in the <code>settings.py</code> of your project.</p> <code>TAILWIND_CLI_VERSION</code> <p>Default: <code>\"3.4.11\"</code></p> <p>This defines the version of the CLI and of Tailwind CSS you want to use in your project.</p> <code>TAILWIND_CLI_PATH</code> <p>Default: <code>\"~/.local/bin/\"</code></p> <p>The path where to store CLI binary on your machine or the path to an manually installed binary.</p> <p>The default behaviour is, that <code>TAILWIND_CLI_PATH</code> should point to a directory, where <code>django-tailwind-cli</code> is allowed to download the official CLI to. Normally, this library tries to manage the tailwind CLI by itself and don't rely on externally installed versions of it.</p> <p>Starting with version 2.7.0 TAILWIND_CLI_PATH can also point to an existing binary, in case you want to install it using some package manager or if you have installed <code>tailwindcss</code> globally with <code>npm</code> along with some plugins you want to use.</p> <p>Warning</p> <p>If you use the new option from 2.7.0 but haven't installed a binary before running any of the management commands, these commands will treat the configured path as a directory and create it, if it is missing. Afterwards the official CLI will be downloaded to this path.</p> <p>In case you want to use the new behaviour, it is highly recommended to also set the new setting <code>TAILWIND_CLI_AUTOMATIC_DOWNLOAD</code> to <code>False</code>.</p> <code>TAILWIND_CLI_SRC_REPO</code> <p>Default: <code>\"tailwindlabs/tailwindcss\"</code></p> <p>Specifies the repository from which the CLI is downloaded. This is useful if you are using a customized version of the CLI, such as tailwind-cli-extra.</p> <p>Warning</p> <p>If you use this option, ensure that you update the <code>TAILWIND_CLI_VERSION</code> to match the version of the customized CLI you are using. Additionally, you may need to update the <code>TAILWIND_CLI_ASSET_NAME</code> if the asset name is different. See the example below.</p> <code>TAILWIND_CLI_ASSET_NAME</code>: <p>Default: <code>\"tailwindcss\"</code></p> <p>Specifies the name of the asset to download from the repository. This option is particularly useful if the customized repository you are using has a different name for the Tailwind CLI asset. For example, the asset name for tailwind-cli-extra is <code>tailwindcss-extra</code>.</p> <p>Note</p> <p>Here is a full example of using a custom repository and asset name:</p> <pre><code>TAILWIND_CLI_SRC_REPO = \"dobicinaitis/tailwind-cli-extra\"\nTAILWIND_CLI_ASSET_NAME = \"tailwindcss-extra\"\nTAILWIND_CLI_VERSION = \"1.7.12\"\n</code></pre> <code>TAILWIND_CLI_AUTOMATIC_DOWNLOAD</code> <p>Default: <code>True</code></p> <p>Enable or disable the automatic downloading of the official CLI to your machine.</p> <code>TAILWIND_CLI_SRC_CSS</code> <p>Default: <code>None</code></p> <p>The name of the optional input file for the Tailwind CLI, where all the directivces and custom styles are defined. This is where you add your own definitions for the different layers.</p> <p>If you don't define this setting, the default of the Tailwind CLI is used.</p> <code>TAILWIND_CLI_DIST_CSS</code> <p>Default: <code>\"css/tailwind.css\"</code></p> <p>The name of the output file. This file is stored relative to the first element of the <code>STATICFILES_DIRS</code> array.</p> <code>TAILWIND_CLI_CONFIG_FILE</code> <p>Default: <code>\"tailwind.config.js\"</code></p> <p>The name of the Tailwind CLI config file. The file is stored relative to the <code>BASE_DIR</code> defined in your settings.</p>"},{"location":"settings/#tailwindconfigjs","title":"<code>tailwind.config.js</code>","text":"<p>If you don't create a <code>tailwind.config.js</code> file yourself, the management commands will create a sane default for you inside the <code>BASE_DIR</code> of your project. The default activates all the official plugins for Tailwind CSS and adds a minimal plugin to support some variants for HTMX.</p>"},{"location":"settings/#default-version","title":"Default version","text":"tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nconst plugin = require(\"tailwindcss/plugin\");\n\nmodule.exports = {\n  content: [\"./templates/**/*.html\", \"**/templates/**/*.html\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require(\"@tailwindcss/typography\"),\n    require(\"@tailwindcss/forms\"),\n    require(\"@tailwindcss/aspect-ratio\"),\n    require(\"@tailwindcss/container-queries\"),\n    plugin(function ({ addVariant }) {\n      addVariant(\"htmx-settling\", [\"&amp;.htmx-settling\", \".htmx-settling &amp;\"]);\n      addVariant(\"htmx-request\", [\"&amp;.htmx-request\", \".htmx-request &amp;\"]);\n      addVariant(\"htmx-swapping\", [\"&amp;.htmx-swapping\", \".htmx-swapping &amp;\"]);\n      addVariant(\"htmx-added\", [\"&amp;.htmx-added\", \".htmx-added &amp;\"]);\n    }),\n  ],\n};\n</code></pre>"},{"location":"settings/#fancier-version-of-tailwindconfigjs","title":"Fancier version of <code>tailwind.config.js</code>","text":"<p>This configuration also embraces the nice trick authored by Carlton Gibson in his post Using Django\u2019s template loaders to configure Tailwind\u00b6. The implementation adopts Carlton's implementation to honor the conventions of this project. If you put your <code>tailwind.config.js</code> in a different location than your <code>BASE_DIR</code>, you have to change this file too.</p> <p>This configuration uses the management command <code>tailwind list_templates</code>, which list all the templates files inside your project.</p> <p>Editor Integration besides VS Code</p> <p>The following default configuration tries to be as smart as possible to find all the templates inside your project and installed dependencies. This works like a charm when you run the debug server using <code>python manage.py tailwind runserver</code>. It also works if you start VSCode with <code>code .</code> from within the active virtual environment.</p> <p>But it does not work with Sublime Text and the lsp-tailwindcss package or with the various LSP packages for (neo)vim. The reason is, that these intergrations not honoring the active virtual environment when being started. If you have an idea to solve this, patches are welcome.</p> <p>With editors besides VS Code please use the default config.</p> tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nconst plugin = require(\"tailwindcss/plugin\");\nconst { spawnSync } = require(\"child_process\");\n\n// Calls Django to fetch template files\nconst getTemplateFiles = () =&gt; {\n  const command = \"python3\";\n  const args = [\"manage.py\", \"tailwind\", \"list_templates\"];\n  // Assumes tailwind.config.js is located in the BASE_DIR of your Django project.\n  const options = { cwd: __dirname };\n\n  const result = spawnSync(command, args, options);\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  if (result.status !== 0) {\n    console.log(result.stdout.toString(), result.stderr.toString());\n    throw new Error(\n      `Django management command exited with code ${result.status}`\n    );\n  }\n\n  const templateFiles = result.stdout\n    .toString()\n    .split(\"\\n\")\n    .map((file) =&gt; file.trim())\n    .filter(function (e) {\n      return e;\n    }); // Remove empty strings, including last empty line.\n  return templateFiles;\n};\n\nmodule.exports = {\n  content: [].concat(getTemplateFiles()),\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require(\"@tailwindcss/typography\"),\n    require(\"@tailwindcss/forms\"),\n    require(\"@tailwindcss/aspect-ratio\"),\n    require(\"@tailwindcss/container-queries\"),\n    plugin(function ({ addVariant }) {\n      addVariant(\"htmx-settling\", [\"&amp;.htmx-settling\", \".htmx-settling &amp;\"]);\n      addVariant(\"htmx-request\", [\"&amp;.htmx-request\", \".htmx-request &amp;\"]);\n      addVariant(\"htmx-swapping\", [\"&amp;.htmx-swapping\", \".htmx-swapping &amp;\"]);\n      addVariant(\"htmx-added\", [\"&amp;.htmx-added\", \".htmx-added &amp;\"]);\n    }),\n  ],\n};\n</code></pre>"},{"location":"template_tags/","title":"Template Tags","text":""},{"location":"template_tags/#tailwind_css","title":"<code>{% tailwind_css %}</code>","text":"<p>Put this template tag in the head of your base template. It includes the <code>link</code>-tags to load the CSS stylesheets.</p> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n    ...\n    {% tailwind_css %}\n    ...\n&lt;/head&gt;\n</code></pre> <p>Depending on the value of the variable <code>settings.DEBUG</code> it also activates preloading.</p> <ul> <li><code>DEBUG = False</code> creates the following output:</li> </ul> <pre><code>&lt;link rel=\"preload\" href=\"/static/css/styles.css\" as=\"style\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/static/css/styles.css\" /&gt;\n</code></pre> <ul> <li><code>DEBUG = True</code> creates this output:</li> </ul> <pre><code>&lt;link rel=\"stylesheet\" href=\"/static/css/styles.css\" /&gt;\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Do I have to install the Tailwind CLI?</p> <p>No. The management commands of this library handle the download and installation of the Tailwind CLI. You don't have to deal with this. But you can configure the installation location and the version of the CLI you want to use. Take a look at the settings section.</p> <p>Do I have to create my own <code>tailwind.config.js</code>?</p> <p>No. The management commands also take care of this step. If no <code>tailwind.config.js</code> is present in your project, a new one with sane defaults will be created. Afterwards this file will be used and be customized by you. The default location for the file is the <code>BASE_DIR</code> of your project, but you can change this. Take a look at the settings section.</p>"},{"location":"usage/#management-commands","title":"Management commands","text":""},{"location":"usage/#build","title":"build","text":"<p>Run <code>python manage.py tailwind build</code> to create an optimized production built of the stylesheet. Afterwards you are ready to deploy. Take care the this command is run before <code>python manage.py collectstatic</code> in your build process.</p>"},{"location":"usage/#download_cli","title":"download_cli","text":"<p>Run <code>python manage.py tailwind download_cli</code> to just download the CLI. This commands downloads the correct version of the CLI for your platform and stores it in the path configured by the <code>TAILWIND_CLI_PATH</code> setting.</p>"},{"location":"usage/#list_templates","title":"list_templates","text":"<p>Run <code>python manage.py tailwind list_templates</code> to find all templates in your django project. This is handy for a setup where you dynamically build the list of files being analyzed by tailwindcss.</p>"},{"location":"usage/#runserver","title":"runserver","text":"<p>Run <code>python manage.py tailwind runserver</code> to start the classic Django debug server in parallel to a tailwind watcher process.</p> <pre><code>Usage: ./manage.py tailwind runserver [OPTIONS] [ADDRPORT]\n\n  Start the Django development server and the Tailwind CLI in watch mode.\n\nArguments:\n  [ADDRPORT]  Optional port number, or ipaddr:port\n\nOptions:\n  -6, --ipv6     Tells Django to use an IPv6 address.\n  --nothreading  Tells Django to NOT use threading.\n  --nostatic     Tells Django to NOT automatically serve static files at\n                STATIC_URL.\n  --noreload     Tells Django to NOT use the auto-reloader.\n  --skip-checks  Skip system checks.\n  --help         Show this message and exit.\n</code></pre>"},{"location":"usage/#runserver_plus","title":"runserver_plus","text":"<p>Run <code>python manage.py tailwind runserver</code> to start the extended debug server from the django-extensions package in parallel to a tailwind watcher process. It offers some nice additions an interactive debug console, SSL support and so on.</p> <pre><code>Usage: ./manage.py tailwind runserver_plus [OPTIONS] [ADDRPORT]\n\n  Start the django-extensions runserver_plus development server and the\n  Tailwind CLI in watch mode.\n\nArguments:\n  [ADDRPORT]  Optional port number, or ipaddr:port\n\nOptions:\n  -6, --ipv6            Tells Django to use an IPv6 address.\n  --nothreading         Tells Django to NOT use threading.\n  --nostatic            Tells Django to NOT automatically serve static files\n                        at STATIC_URL.\n  --noreload            Tells Django to NOT use the auto-reloader.\n  --skip-checks         Skip system checks.\n  --pdb                 Drop into pdb shell at the start of any view.\n  --ipdb                Drop into ipdb shell at the start of any view.\n  --pm                  Drop into (i)pdb shell if an exception is raised in a\n                        view.\n  --print-sql           Print SQL queries as they're executed.\n  --print-sql-location  Show location in code where SQL query generated from.\n  --cert-file TEXT      SSL .crt file path. If not provided path from --key-\n                        file will be selected. Either --cert-file or --key-\n                        file must be provided to use SSL.\n  --key-file TEXT       SSL .key file path. If not provided path from --cert-\n                        file will be selected. Either --cert-file or --key-\n                        file must be provided to use SSL.\n  --help                Show this message and exit.\n</code></pre>"},{"location":"usage/#watch","title":"watch","text":"<p>Run <code>python manage.py tailwind watch</code> to just start a tailwind watcher process if you prefer to start your debug server in a seperate shell or prefer a different solution than runserver or runserver_plus.</p>"},{"location":"usage/#use-with-docker-compose","title":"Use with Docker Compose","text":"<p>When used in the <code>watch</code> mode, the Tailwind CLI requires a TTY-enabled environment to function correctly. In a Docker Compose setup, ensure that the container executing the Tailwind style rebuild command (either <code>python manage.py tailwind runserver</code> or <code>python manage.py tailwind watch</code>, as noted above) is configured with the <code>tty: true</code> setting in your <code>docker-compose.yml</code>.</p> <pre><code>web:\n  command: python manage.py tailwind runserver\n  tty: true\n\n# or\n\ntailwind-sidecar:\n  command: python manage.py tailwind watch\n  tty: true\n</code></pre>"}]}